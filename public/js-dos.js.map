{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js-dos-ts/js-dos-build.ts","js-dos-ts/js-dos-ci.ts","js-dos-ts/js-dos-fs.ts","js-dos-ts/js-dos-host.ts","js-dos-ts/js-dos-module.ts","js-dos-ts/js-dos-options.ts","js-dos-ts/js-dos-ui.ts","js-dos-ts/js-dos-xhr.ts","js-dos-ts/js-dos.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Build","version","wasmSize","jsSize","DosCommandInterface","dos","onready","_this","this","_classCallCheck","shellInputQueue","shellInputClients","em","api","ping","msg","_len","arguments","args","Array","_key","onping","canvas","width","height","_this2","_len2","cmd","_key2","Promise","resolve","reject","push","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","requestShellInput","_this3","send","data","error","sendKeyPress","buffer","maxLength","shift","cmdLength","lengthBytesUTF8","onerror","stringToUTF8","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","js_dos_xhr_1","DosFS","url","type","Xhr","responseType","fail","progress","total","loaded","onprogress","success","bytes","Uint8Array","_malloc","HEAPU8","set","retcode","_extract_zip","_free","js_dos_build_1","DosHost","wasmSupported","global","window","wdosboxPromise","WebAssembly","_typeof","instantiate","compile","wmodule","Module","of","Instance","polyfill","Math","imul","b","al","bl","fround","x","clz32","trunc","ceil","floor","WDOSBOX","ondosbox","instantiateWasm","compileDosBox","then","instance","setTimeout","message","buildTotal","wasmUrl","replace","status","response","promise","onreject","reason","catch","wasmModule","info","receiveInstance","eval","Host","js_dos_ci_1","js_dos_fs_1","js_dos_options_1","js_dos_ui_1","DosModule","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","isValid","ci","fs","ui","DosOptions","log","dosbox","wdosboxUrl","console","DosUi","stage","SDL","defaults","widht","copyOnLock","discardOnLock","opaqueFrontBuffer","main","detach","unshift","callMain","css","overlayHtml","document","getElementById","style","createElement","id","innerHTML","head","appendChild","parentElement","className","_container","replaceChild","overlay","container","childById","loaderMessage","hidden","hide","onprogressFallback","round","show","setAttribute","parent","childElementCount","child","children","options","resource","method","xhr","XMLHttpRequest","open","setRequestHeader","overrideMimeType","progressListner","addEventListener","evt","errorListener","onreadystatechange","onReadyStateChange","readyState","max","bufView","Uint16Array","result","maxCallSize","pow","String","fromCharCode","apply","subarray","js_dos_host_1","js_dos_module_1","Dos","dosReadyPromise","assign","resolveDosBox","ready","runtime"],"mappings":"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","file":"js-dos.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Autogenerated\n// -------------\n// gulpfile.js --> generateBuildInfo\n\nexport const Build = {\n    version: \"6.22-9d2cf856faaa91e726b1bcc49972c2a95849c30d\",\n    wasmSize: 2167540,\n    jsSize:  503536,\n};\n","// # DosCommandInterface\n// Is abstraction that allows you to control runned instance of js-dos\nimport { Dos } from \"./js-dos\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport class DosCommandInterface {\n    public dos: DosModule;\n    private em: typeof Module;\n    private api: LowLevelApi;\n    private onready: (ci: DosCommandInterface) => void;\n\n    private shellInputQueue: string[] = [];\n    private shellInputClients: Array<() => void> = [];\n\n    constructor(dos: DosModule, onready: (ci: DosCommandInterface) => void) {\n        this.dos = dos;\n        this.em = (dos as any);\n        this.api = (dos as any);\n        this.api.ping = (msg: string, ...args: any[]) => {\n            this.onping(msg, args);\n        };\n        this.onready = onready;\n    }\n\n    // * `width()` - return dosbox window width in pixels\n    public width() {\n        return this.dos.canvas.width;\n    }\n\n    // * `height()` - return dosbox window height in pixels\n    public height() {\n        return this.dos.canvas.height;\n    }\n\n    // * `shell([cmd1, cmd2, ...])` - executes passed commands\n    // in dosbox shell if it's runned, returns Promise that\n    // resolves when commands sequence is executed\n    public shell(...cmd: string[]) {\n        if (cmd.length === 0) {\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.shellInputClients.push(resolve);\n            for (const next of cmd) {\n                this.shellInputQueue.push(next);\n            }\n            this.requestShellInput();\n        });\n    }\n\n    // * `screenshot()` - get screnshot of canvas as ImageData\n    public screenshot() {\n        return new Promise((resolve) => {\n            this.api.send(\"screenshot\", \"\", (data) => {\n                resolve(data);\n            });\n        });\n    }\n\n    // * `exit()` - immediately exit from runtime\n    public exit() {\n        try {\n            this.api.send(\"exit\");\n        } catch (e) {\n            return 0;\n        }\n\n        this.dos.error(\"Runtime is still alive!\");\n        return -1;\n    }\n\n    private sendKeyPress(code: number) {\n        this.api.send(\"sdl_key_event\", code + \"\");\n    }\n\n    private requestShellInput() {\n        this.sendKeyPress(13);\n    }\n\n    private onping(msg: string, args: any[]) {\n        switch (msg) {\n            case \"ready\":\n                this.onready(this);\n                break;\n            case \"shell_input\":\n                if (this.shellInputQueue.length === 0) {\n                    return;\n                }\n\n                const buffer: number = args[0];\n                const maxLength: number = args[1];\n\n                const cmd = this.shellInputQueue.shift();\n                const cmdLength = (this.em as any).lengthBytesUTF8(cmd) + 1;\n\n                if (cmdLength > maxLength) {\n                    this.dos.onerror(\"Can't execute cmd '\" + cmd +\n                        \"', because it's bigger then max cmd length \" + maxLength);\n                    return;\n                }\n\n                (this.em as any).stringToUTF8(cmd, buffer, cmdLength);\n\n                if (this.shellInputQueue.length === 0) {\n                    for (const resolve of this.shellInputClients) {\n                        resolve();\n                    }\n                    this.shellInputClients = [];\n                } else {\n                    this.requestShellInput();\n                }\n            default:\n            /* do nothing */\n        }\n    }\n}\n\ninterface LowLevelApi {\n    send: (event: string, msg?: any, callback?: (msg: string) => void) => void;\n    ping: (msg: string) => void;\n}\n","// # DosFS\n// API for working with file system of dosbox\n\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport class DosFS {\n    private dos: DosModule;\n    private em: typeof Module;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.em = dos as any;\n    }\n\n    // ## extract\n    // download archive by given url and then extract it in cwd (cwd will be mounted as C:)\n    // * `url` - url for downloading archive\n    // * `type` - archive type **only zip is supported**\n    public extract(url: string, type: string = \"zip\") {\n        // this method will return `Promise<void>`, that will be resolved\n        // on success with empty object or rejected\n        return new Promise<void>((resolve, reject) => {\n            if (type !== \"zip\") {\n                reject(\"Only ZIP archive is supported\");\n                return;\n            }\n\n            new Xhr(url, {\n                responseType: \"arraybuffer\",\n                fail: (msg) => reject(msg),\n                progress: (total, loaded) => this.dos.onprogress(\"Downloading \" + url, total, loaded),\n                success: (data: ArrayBuffer) => {\n                    const bytes = new Uint8Array(data);\n                    const buffer = this.em._malloc(bytes.length);\n                    this.em.HEAPU8.set(bytes, buffer);\n                    const retcode = (this.em as any)._extract_zip(buffer, bytes.length);\n                    this.em._free(buffer);\n\n                    if (retcode === 0) {\n                        resolve();\n                    } else {\n                        reject(\"Can't extract zip, retcode \" + retcode + \", see more info in logs\");\n                    }\n                },\n            });\n        });\n    }\n}\n","// # DosHost\n// This class is used to detect and provide information about\n// features that supported in current environment\n\n/* tslint:disable:member-ordering */\nimport { Build } from \"./js-dos-build\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nclass DosHost {\n\n    public wasmSupported = false;\n    public global = window as any;\n\n    private wdosboxPromise: Promise<any> = null;\n\n    constructor() {\n        this.global.exports = {};\n\n        // Host able to detect is WebAssembly supported or not,\n        // this information is stored in `Host.wasmSupported` variable\n        try {\n            if (typeof WebAssembly === \"object\" &&\n                typeof WebAssembly.instantiate === \"function\" &&\n                typeof WebAssembly.compile === \"function\") {\n\n                const wmodule = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n                if (wmodule instanceof WebAssembly.Module) {\n                    this.wasmSupported = new WebAssembly.Instance(wmodule) instanceof WebAssembly.Instance;\n                }\n            }\n        } catch (error) {\n            /* do nothing WebAssembly is not supported */\n        }\n\n        // Host also provides limited set of polyfills to support legacy browsers\n        this.polyfill();\n    }\n\n    // Currently polyfill contains implementations for:\n    // `Math.imul`, `Math.fround`, `Math.clz32`, `Math.trunc`\n    /* tslint:disable:no-bitwise */\n    /* tslint:disable:only-arrow-functions */\n    private polyfill() {\n        if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) {\n            Math.imul = function imul(a: any, b: any) {\n                const ah = a >>> 16;\n                const al = a & 0xffff;\n                const bh = b >>> 16;\n                const bl = b & 0xffff;\n                return (al * bl + ((ah * bl + al * bh) << 16)) | 0;\n            };\n        }\n        Math.imul = Math.imul;\n\n        if (!Math.fround) {\n            Math.fround = function(x) { return x; };\n        }\n        Math.fround = Math.fround;\n\n        if (!Math.clz32) {\n            Math.clz32 = function(x) {\n                x = x >>> 0;\n                for (let i = 0; i < 32; i++) {\n                    if (x & (1 << (31 - i))) { return i; }\n                }\n                return 32;\n            };\n        }\n        Math.clz32 = Math.clz32;\n\n        if (!Math.trunc) {\n            Math.trunc = function(x) {\n                return x < 0 ? Math.ceil(x) : Math.floor(x);\n            };\n        }\n        Math.trunc = Math.trunc;\n    }\n\n    // ## resolveDosBox\n    // `resolveDosBox` is another important task of DosHost\n    public resolveDosBox(url: string, module: DosModule) {\n        // When dosbox is resolved, WDOSBOX module is set to\n        // global variable `exports.WDOSBOX`. This variable is\n        // used to prevent next loads of same dosbox module.\n        if (this.global.exports.WDOSBOX) {\n            module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            return;\n        }\n\n        if (!this.wasmSupported) {\n            module.onerror(\"WebAssembly is not supported, can't resolve wdosbox\");\n            return;\n        }\n\n        if (this.wdosboxPromise === null) {\n            this.wdosboxPromise = this.compileDosBox(url, module);\n        }\n\n        this.wdosboxPromise.then((instance: any) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            };\n            setTimeout(fn, 1);\n        }, (message: string) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.onerror(message);\n            };\n            setTimeout(fn, 1);\n        });\n    }\n\n    // If dosbox is not yet resolved, then:\n    private compileDosBox(url: string, module: DosModule) {\n        const buildTotal = Build.wasmSize + Build.jsSize;\n        return new Promise((resolve, reject) => {\n            const wasmUrl = url.replace(\".js\", \".wasm.js\");\n\n            // 1. Host downloads `wdosbox` asm + js scripts\n            new Xhr(wasmUrl, {\n                responseType: \"arraybuffer\",\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox\", buildTotal, loaded);\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download wasm, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: any) => {\n                    // 2. Compile dosbox wasm module\n                    const promise = WebAssembly.compile(response);\n                    const onreject = (reason: any) => {\n                        reject(reason + \"\");\n                    };\n                    promise.catch(onreject);\n                    promise.then((wasmModule) => {\n                        this.global.exports.instantiateWasm = (info: any, receiveInstance: any) => {\n                            // 3.  Instaniate it for each new dosbox runtime\n                            return WebAssembly.instantiate(wasmModule, info)\n                                .catch(onreject)\n                                .then((instance) => {\n                                    receiveInstance(instance, wasmModule);\n                                });\n                        };\n\n                        new Xhr(url, {\n                            progress: (total, loaded) => {\n                                if (module.onprogress) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, Build.wasmSize + loaded);\n                                }\n                            },\n                            fail: (url: string, status: number, message: string) => {\n                                reject(\"Can't download wdosbox.js, code: \" + status +\n                                    \", message: \" + message + \", url: \" + url);\n                            },\n                            success: (response: any) => {\n                                module.onprogress(\"Resolving DosBox\", buildTotal, buildTotal);\n\n                                /* tslint:disable:no-eval */\n                                eval.call(window, response);\n                                resolve(this.global.exports.WDOSBOX);\n                            },\n                        });\n                    });\n                },\n            });\n        });\n    }\n\n}\n\nexport const Host = new DosHost();\n","// # DosModule\n// DosModule is [emscripten module object](https://kripken.github.io/emscripten-site/docs/api_reference/module.html),\n// with additional functionality\nimport { DosRuntime } from \"./js-dos\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { DosOptions } from \"./js-dos-options\";\nimport { DosUi } from \"./js-dos-ui\";\n\nexport class DosModule extends DosOptions {\n    public isValid: boolean = false;\n    public canvas: HTMLCanvasElement = null;\n    private ci: Promise<DosCommandInterface> = null;\n    private instance: any;\n    private fs: DosFS = null;\n    private ui: DosUi = null;\n    private onready: (runtime: DosRuntime) => void;\n\n    constructor(canvas: HTMLCanvasElement, onready: (runtime: DosRuntime) => void) {\n        super();\n        this.canvas = canvas;\n        this.onready = onready;\n    }\n\n    // DosModule implements simply logging features:\n    // `debug`, `info`, `warn`, `error` methods\n    public debug(message: string) {\n        this.log(\"[DEBUG] \" + message);\n    }\n\n    public info(message: string) {\n        this.log(\"[INFO] \" + message);\n    }\n\n    public warn(message: string) {\n        this.log(\"[WARN] \" + message);\n    }\n\n    public error(message: string) {\n        this.log(\"[ERROR] \" + message);\n    }\n\n    // When [Host](js-dos-host.html) is resolved method\n    // `ondosbox` is called. This method instaniate\n    // wasm dosbox module with `this` as emscripten\n    // module object. It means that emscripten will call\n    // `this.onRuntimeInitialized` when runtime will be ready\n    public ondosbox(dosbox: any, instantiateWasm: any) {\n        this.info(\"DosBox resolved\");\n        (this as any).instantiateWasm = instantiateWasm;\n        this.instance = new dosbox(this);\n    }\n\n    public resolve() {\n        if (!this.wdosboxUrl) {\n            this.wdosboxUrl = \"wdosbox.js\";\n        }\n\n        if (!this.log) {\n            /* tslint:disable:no-console */\n            this.log = (message: string) => console.log(message);\n        }\n\n        if (!this.canvas) {\n            this.onerror(\"canvas field is required, but not set!\");\n            return;\n        }\n\n        if (!this.onprogress) {\n            this.ui = new DosUi(this);\n            this.onprogress = (stage, total, loaded) => this.ui.onprogress(stage, total, loaded);\n        }\n\n        // DosModule overrides defaults for emscripten SDL wrapper\n        // for maximum performance\n        (this as any).SDL = {\n            defaults: {\n                widht: 320,\n                height: 200,\n                copyOnLock: false,\n                discardOnLock: true,\n                opaqueFrontBuffer: false,\n            },\n        };\n\n        this.isValid = true;\n    }\n\n    public onRuntimeInitialized() {\n        const mainFn = (args: string[]) => {\n            // When emscripten runtime is initialized and main\n            // function is called:\n            // * DosModule detach [auto ui](js-dos-ui.ts)\n            if (this.ui !== null) {\n                this.ui.detach();\n                this.ui = null;\n            }\n            // * Mount emscripten FS as drive c:\n            args.unshift(\"-c\", \"mount c .\", \"-c\", \"c:\");\n            // * Run dosbox with passed arguments and resolve [DosCommandInterface](js-dos-ci.html)\n            (this as any).callMain(args);\n            return new Promise<DosCommandInterface>((resolve) => {\n                new DosCommandInterface(this, (ci: DosCommandInterface) => {\n                    resolve(ci);\n                });\n            });\n        };\n        this.fs = new DosFS(this);\n        this.onready({\n            fs: this.fs,\n            main: mainFn,\n        });\n    }\n\n}\n","// # DosOptions\n// Is a options object that you pass to constructor of [Dos](js-dos.html)\n// class, to configure emulation layer:\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\n\nexport class DosOptions {\n\n    // `onprogress` - progress event listener, it is fired when loading progress is changed\n    // * `stage` - current loading stage\n    // * `total` - total bytes to download on current stage\n    // * `loaded` - downloaded bytes\n    public onprogress?: (stage: string, total: number, loaded: number) => void;\n\n    // `onerror` - this function is called when error happens\n    // * `message` - infomation about error\n    public onerror?: (message: string) => void;\n\n    // `log` - you can provide log function, to override logging, by default js-dos uses console.log as implementation\n    public log?: (message: string) => void;\n\n    // `wdosboxUrl` - you can set alternative url for downloading js-dos script, default is 'wdosbox.js'\n    public wdosboxUrl?: string;\n\n}\n","// # JsDosUi\n// Optional ui module for js-dos.\n// This ui will be applied if client did not set `onprogress` in [DosOptions](js-dos-options.html)\n\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosUi {\n    private canvas: HTMLCanvasElement;\n    private dos: DosModule;\n\n    private overlay: HTMLDivElement;\n    private loaderMessage: HTMLDivElement;\n    private hidden: boolean;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.canvas = dos.canvas;\n\n        // This ui replace canvas element with div .dosbox-container,\n        // that contains original canvas and .dosbox-overlay as children\n        // You can change style of ui by editing css for this two classes\n\n        try {\n            if (document.getElementById(\"js-dos-ui-css\") === null) {\n                const style = document.createElement(\"style\") as HTMLStyleElement;\n                style.id = \"js-dos-ui-css\";\n                style.innerHTML = this.css;\n                document.head.appendChild(style);\n            }\n\n            if (this.canvas.parentElement.className !== \"dosbox-container\") {\n                const container = document.createElement(\"div\") as HTMLDivElement;\n                container.className = \"dosbox-container\";\n\n                const parent = this.canvas.parentElement;\n                parent.replaceChild(container, this.canvas);\n                container.appendChild(this.canvas);\n\n                const overlay = document.createElement(\"div\") as HTMLDivElement;\n                overlay.className = \"dosbox-overlay\";\n                container.appendChild(overlay);\n\n                overlay.innerHTML = this.overlayHtml;\n            }\n\n            const container = this.canvas.parentElement;\n            this.overlay = this.childById(container, \"dosbox-overlay\");\n            this.loaderMessage = this.childById(this.overlay, \"dosbox-loader-message\");\n\n            this.hidden = false;\n            this.hide();\n        } catch (e) {\n            this.onprogress = this.onprogressFallback;\n        }\n    }\n\n    public onprogress(stage: string, total: number, loaded: number) {\n        const message = stage + \" \" + Math.round(loaded * 100 / total * 10) / 10 + \"%\";\n        this.loaderMessage.innerHTML = message;\n        this.dos.info(message);\n\n        if (loaded >= total) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public detach() {\n        this.hide();\n        this.onprogress = this.onprogressFallback;\n    }\n\n    public hide() {\n        if (this.hidden) {\n            return;\n        }\n        this.hidden = true;\n        this.overlay.setAttribute(\"style\", \"display: none\");\n    }\n\n    public show() {\n        if (!this.hidden) {\n            return;\n        }\n        this.hidden = false;\n        this.overlay.setAttribute(\"style\", \"display: block\");\n    }\n\n    private onprogressFallback(stage: string, total: number, loaded: number) {\n        this.dos.info(stage + \" \" + loaded * 100 / total + \"%\");\n    }\n\n    private childById(parent: Element, className: string) {\n        if (parent === null) {\n            return null;\n        }\n\n        for (let i = 0; i < parent.childElementCount; ++i) {\n            let child = parent.children[i];\n            if (child.className === className) {\n                return child as HTMLDivElement;\n            }\n\n            child = this.childById(child, className);\n            if (child !== null) {\n                return child as HTMLDivElement;\n            }\n        }\n\n        return null;\n    }\n\n    // This is css style of ui\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private css: string = `\n    .dosbox-container { position: relative; min-width: 320px; min-height: 200px; display: inline-block; }\n    .dosbox-overlay, .dosbox-loader { position: absolute; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(51, 51, 51, 0.7); }\n    .dosbox-start { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; color: #f80; font-size: 1.5em; text-decoration: underline; cursor: pointer; }\n    .dosbox-overlay a { color: #f80; }\n    .dosbox-powered { position: absolute; right: 1em; bottom: 1em; font-size: 0.8em; color: #9C9C9C; }\n    .dosbox-loader-message { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; margin: 0 0 -3em 0; box-sizing: border-box; color: #f80; font-size: 1.5em; }\n    @-moz-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @-webkit-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } .st-loader { width: 10em; height: 2.5em; position: absolute; top: 50%; left: 50%; margin: -1.25em 0 0 -5em; box-sizing: border-box; }\n    .st-loader:before, .st-loader:after { content: \"\"; display: block; position: absolute; top: 0; bottom: 0; width: 1.25em; box-sizing: border-box; border: 0.25em solid #f80; }\n    .st-loader:before { left: -0.76923em; border-right: 0; }\n    .st-loader:after { right: -0.76923em; border-left: 0; }\n    .st-loader .equal { display: block; position: absolute; top: 50%; margin-top: -0.5em; left: 4.16667em; height: 1em; width: 1.66667em; border: 0.25em solid #f80; box-sizing: border-box; border-width: 0.25em 0; -moz-animation: loading 1.5s infinite ease-in-out; -webkit-animation: loading 1.5s infinite ease-in-out; animation: loading 1.5s infinite ease-in-out; background: #f80; }\n    `;\n\n    // This is structure of dosbox-overlay\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private overlayHtml: string = `\n        <div class=\"dosbox-loader\">\n            <div class=\"st-loader\">\n                <span class=\"equal\"></span>\n            </div>\n            <div class=\"dosbox-loader-message\"></div>\n        </div>\n        <div class=\"dosbox-powered\">\n            Powered by &nbsp;<a href=\"https://js-dos.com\">js-dos.com</a> (6.22)\n        </div>\n    `;\n}\n","// # Xhr\n// `Xhr` is small wrapper over XMLHttpRequest, that provides some\n// handy methods\n\n// Xhr is called with url, and XhrOptions object:\ninterface XhrOptions {\n    // `method` - \"GET\" | \"POST\"\n    method?: string;\n    // `success` - callback when resource is downloaded\n    success?: (response: any) => void;\n    // `progress` - callback for progress\n    progress?: (total: number, loaded: number) => void;\n    // `fail` - fail callback\n    fail?: (url: string, status: number, message: string) => void;\n    // `data` - data for POST request, should typeof `application/x-www-form-urlencoded`\n    data?: string;\n    // `responseType` - XMLHttpRequestResponseType\n    responseType?: XMLHttpRequestResponseType;\n}\n\n// Class Xhr does not have any public methods\nexport class Xhr {\n    private resource: string;\n    private options: XhrOptions;\n    private xhr: XMLHttpRequest;\n    private total: number = 0;\n    private loaded: number = 0;\n\n    constructor(url: string, options: XhrOptions) {\n        this.resource = url;\n        this.options = options;\n        this.options.method = options.method || \"GET\";\n        this.xhr = new XMLHttpRequest();\n        this.xhr.open(this.options.method, url, true);\n        if (this.options.method === \"POST\") {\n            this.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n        let progressListner;\n        if (typeof (progressListner = this.xhr).addEventListener === \"function\") {\n            progressListner.addEventListener(\"progress\", (evt) => {\n                this.total = evt.total;\n                this.loaded = evt.loaded;\n                if (this.options.progress) {\n                    return this.options.progress(evt.total, evt.loaded);\n                }\n            });\n        }\n\n        let errorListener;\n        if (typeof (errorListener = this.xhr).addEventListener === \"function\") {\n            errorListener.addEventListener(\"error\", (evt) => {\n                if (this.options.fail) {\n                    this.options.fail(this.resource, this.xhr.status, \"connection problem\");\n                    return delete this.options.fail;\n                }\n            });\n        }\n        this.xhr.onreadystatechange = () => {\n            return this.onReadyStateChange();\n        };\n        if (this.options.responseType) {\n            this.xhr.responseType = this.options.responseType;\n        }\n        this.xhr.send(this.options.data);\n    }\n\n    private onReadyStateChange() {\n        if (this.xhr.readyState === 4) {\n            if (this.xhr.status === 200) {\n                if (this.options.success) {\n                    const total = Math.max(this.total, this.loaded);\n                    this.options.progress(total, total);\n                    return this.options.success(this.xhr.response);\n                }\n            } else if (this.options.fail) {\n                this.options.fail(this.resource, this.xhr.status, \"connection problem\");\n                return delete this.options.fail;\n            }\n        }\n    }\n\n    private arrayBufferToString(buffer: ArrayBuffer) {\n        const bufView = new Uint16Array(buffer);\n        const length = bufView.length;\n        let result = \"\";\n        let maxCallSize = Math.pow(2, 16) - 1;\n        let i = 0;\n        while (i < length) {\n            if (i + maxCallSize > length) {\n                maxCallSize = length - i;\n            }\n            result += String.fromCharCode.apply(null, bufView.subarray(i, i + maxCallSize));\n            i += maxCallSize;\n        }\n        return result;\n    }\n\n}\n","\n// # Dos\n// Dos function is entry point that provides emulation layer.\n// As emulation layer js-dos uses [DosBox ported to emscripten](https://github.com/dreamlayers/em-dosbox/#compiling).\n// Example of usage:\n// ```javascript\n// Dos(canvas).ready((fs, main) => {\n//     fs.extract(\"digger.zip\").then(() => {\n//         main([\"-c\", \"DIGGER.COM\"])\n//     });\n// });\n// ```\n\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { Host } from \"./js-dos-host\";\nimport { DosModule } from \"./js-dos-module\";\nimport { DosOptions } from \"./js-dos-options\";\n\n// When you call Dos(canvas, options) js-dos behind the scene will download\n// dosbox and prepare it to start. This function will return `Promise<DosReadyPromise>`\n// that will be resolved when dosbox is ready. In case of error promise\n// will be rejected.\n//\n// * `canvas`: HTMLCanvasElement - this canvas element is used as window for dosbox\n// * `options`: [DosOptions](js-dos-options.html) - optional configuration object\n//\nexport function Dos(canvas: HTMLCanvasElement, options?: DosOptions) {\n    const promise = new Promise<DosRuntime>((resolve, reject) => {\n        const module = new DosModule(canvas, resolve);\n        Object.assign(module, options);\n\n        // Error propagation should support both ways:\n        // 1. Through rejecting of promise\n        // 2. Fire onerror function of DosOptions object\n\n        const onerror = module.onerror;\n        module.onerror = (message: string) => {\n            reject(message);\n\n            const fn = () => {\n                if (onerror) {\n                    onerror(message);\n                    module.onerror = onerror;\n                } else {\n                    module.onerror = module.error;\n                }\n            };\n\n            setTimeout(fn, 1);\n        };\n\n        module.resolve();\n        if (!module.isValid) {\n            return;\n        }\n\n        // See [Host](js-dos-host.html) to understand resolving of emulation layer (dosbox).\n        Host.resolveDosBox(module.wdosboxUrl, module);\n    });\n\n// ## DosReadyPromise\n// Is a Promise object with additional method ready.\n// Method `ready` is just a wrapper over `then` method that\n// split resolved object into meaningful parts.\n\n    const dosReadyPromise = (promise as unknown) as DosReadyPromise;\n    dosReadyPromise.ready = (onready) => {\n        dosReadyPromise.then((runtime: DosRuntime) => {\n            onready(runtime.fs, runtime.main);\n        });\n    };\n    return dosReadyPromise;\n}\n\nexport type DosMainFn = (args: string[]) => Promise<DosCommandInterface>;\n\n// Plain promise will be resolved with `DosRuntime` interface, that\n// includes:\n// * `fs`: [DosFS](js-dos-fs.html) - API for working with dosbox filesystem\n// * `main`: DosMainFn - a function that you should call to actuall start\n// dosbox. It's like a main function in C++, or shell command line. This function\n// will return Promise of [DosCommandInterface](js-dos-ci.html). You can use\n// it to control runned dosbox.\nexport interface DosRuntime {\n    fs: DosFS;\n    main: DosMainFn;\n}\n\nexport interface DosReadyPromise extends Promise<DosRuntime> {\n    // `onready` - callback that receive DosRuntime splitted by fields\n    ready: (onready: (fs: DosFS, main: DosMainFn) => void) => void;\n}\n\n(window as any).Dos = Dos;\n"]}